const form=document.querySelector("#form"),tasksList=document.querySelector("#tasksList");let tasks=[];function startApp(){eventListeners(),loadLocalStorage(),actualDate()}function eventListeners(){form.addEventListener("submit",addTask)}function loadLocalStorage(){tasks=JSON.parse(localStorage.getItem("tasks"))||[],createHTML()}function addTask(t){t.preventDefault();const e=document.querySelector("#formInput").value;if(""===e)return void showError("No escribiste una tarea");const s={id:Date.now(),task:e,completed:!1};tasks=[...tasks,s],createHTML(),form.reset()}function showError(t){const e=document.querySelector(".main"),s=document.createElement("p");s.textContent=t,s.classList.add("error"),e.appendChild(s),setTimeout(()=>{s.remove()},3e3)}function createHTML(){cleanHTML(),tasks.length>0&&tasks.forEach(t=>{const e=`   \n      <button class="task__btn task__btn--check" id="btnCheck">\n      <svg\n        class="task__btn-icon task__btn-icon--check"\n        xmlns="http://www.w3.org/2000/svg"\n        viewBox="0 0 24 24">\n        <path\n          d="m10 15.586-3.293-3.293-1.414 1.414L10 18.414l9.707-9.707-1.414-1.414z"\n        ></path>\n      </svg>\n      </button>\n      <p class="task__text">\n        ${t.task}\n      </p>\n      <button class="task__btn task__btn--trash" id="btnTrash">\n        <svg\n          class="task__btn-icon task__btn-icon--trash"\n          xmlns="http://www.w3.org/2000/svg"\n          viewBox="0 0 24 24">\n          <path\n          d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path>\n        <path d="M9 10h2v8H9zm4 0h2v8h-2z"></path>\n      </svg>\n    </button>\n     `,s=document.createElement("li");s.classList.add("task"),s.innerHTML=e,tasksList.appendChild(s);const n=s.querySelector(".task__btn--trash"),a=s.querySelector(".task__btn--check");n.onclick=()=>{deleteTask(t.id)},a.onclick=()=>{completeTask(t.id)},t.completed&&s.classList.add("task__completed")}),syncStorage()}function syncStorage(){localStorage.setItem("tasks",JSON.stringify(tasks))}function completeTask(t){tasks=tasks.filter(e=>(e.id===t&&(e.completed=!e.completed),e)),createHTML()}function deleteTask(t){tasks=tasks.filter(e=>e.id!==t),createHTML()}function cleanHTML(){for(;tasksList.firstChild;)tasksList.removeChild(tasksList.firstChild)}function actualDate(){const t=document.querySelector("#date"),e=new Date,s=`${e.getDay()}/${e.getMonth()}/${e.getFullYear()}`;t.textContent=s}document.addEventListener("DOMContentLoaded",startApp);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
