const form=document.querySelector("#form"),tasksList=document.querySelector("#tasksList");let tasks=[];function startApp(){eventListeners(),actualDate()}function eventListeners(){form.addEventListener("submit",addTask)}function addTask(t){t.preventDefault();const e=document.querySelector("#formInput").value;if(""===e)return void showError("No escribiste una tarea");const n={id:Date.now(),task:e};tasks=[...tasks,n],createHTML(),form.reset()}function showError(t){const e=document.querySelector(".main"),n=document.createElement("p");n.textContent=t,n.classList.add("error"),e.appendChild(n),setTimeout(()=>{n.remove()},3e3)}function createHTML(){cleanHTML(),tasks.length>0&&tasks.forEach(t=>{const e=`   \n      <svg\n        class="task__check"\n        xmlns="http://www.w3.org/2000/svg"\n        viewBox="0 0 24 24">\n      <path\n        d="m10 15.586-3.293-3.293-1.414 1.414L10 18.414l9.707-9.707-1.414-1.414z"></path>\n      </svg>\n\n      <p class="task__text">\n      ${t.task}\n      </p>\n\n      <svg\n        class="task__trash"\n        xmlns="http://www.w3.org/2000/svg"\n        viewBox="0 0 24 24">\n      <path\n        d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z"></path>\n      <path d="M9 10h2v8H9zm4 0h2v8h-2z"></path>\n      </svg>`,n=document.createElement("li");n.classList.add("task"),n.innerHTML=e,tasksList.appendChild(n)})}function cleanHTML(){for(;tasksList.firstChild;)tasksList.removeChild(tasksList.firstChild)}function actualDate(){const t=document.querySelector("#date"),e=new Date,n=`${e.getDay()}/${e.getMonth()}/${e.getFullYear()}`;t.textContent=n}document.addEventListener("DOMContentLoaded",startApp);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJmb3JtIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidGFza3NMaXN0IiwidGFza3MiLCJzdGFydEFwcCIsImV2ZW50TGlzdGVuZXJzIiwiYWN0dWFsRGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhZGRUYXNrIiwiZSIsInByZXZlbnREZWZhdWx0IiwidGFzayIsInZhbHVlIiwic2hvd0Vycm9yIiwidGFza09iaiIsImlkIiwiRGF0ZSIsIm5vdyIsImNyZWF0ZUhUTUwiLCJyZXNldCIsImVycm9yIiwibWFpbiIsImVycm9yTWVzc2FnZSIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImNsYXNzTGlzdCIsImFkZCIsImFwcGVuZENoaWxkIiwic2V0VGltZW91dCIsInJlbW92ZSIsImNsZWFuSFRNTCIsImxlbmd0aCIsImZvckVhY2giLCJ0YXNrQ29udGVudCIsInRhc2tMSSIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsInRhc2tzRGF0ZSIsImRhdGUiLCJnZXREYXkiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxLQUFPQyxTQUFTQyxjQUFjLFNBQzlCQyxVQUFZRixTQUFTQyxjQUFjLGNBQ3pDLElBQUlFLE1BQVEsR0FLWixTQUFTQyxXQUNQQyxpQkFDQUMsYUFHRixTQUFTRCxpQkFDUE4sS0FBS1EsaUJBQWlCLFNBQVVDLFNBSWxDLFNBQVNBLFFBQVFDLEdBQ2ZBLEVBQUVDLGlCQUdGLE1BQ01DLEVBRFlYLFNBQVNDLGNBQWMsY0FDbEJXLE1BRXZCLEdBQWEsS0FBVEQsRUFHRixZQUZBRSxVQUFVLDJCQUtaLE1BQU1DLEVBQVUsQ0FDZEMsR0FBSUMsS0FBS0MsTUFDVE4sS0FBQUEsR0FJRlIsTUFBUSxJQUFJQSxNQUFPVyxHQUduQkksYUFHQW5CLEtBQUtvQixRQUdQLFNBQVNOLFVBQVVPLEdBQ2pCLE1BQU1DLEVBQU9yQixTQUFTQyxjQUFjLFNBQzlCcUIsRUFBZXRCLFNBQVN1QixjQUFjLEtBRTVDRCxFQUFhRSxZQUFjSixFQUMzQkUsRUFBYUcsVUFBVUMsSUFBSSxTQUUzQkwsRUFBS00sWUFBWUwsR0FHakJNLFdBQVcsS0FDVE4sRUFBYU8sVUFDWixLQUlMLFNBQVNYLGFBQ1BZLFlBRUkzQixNQUFNNEIsT0FBUyxHQUNqQjVCLE1BQU02QixRQUFTckIsSUFFYixNQUFNc0IsRUFBYyx1UkFVbEJ0QixFQUFLQSwwVkFZRHVCLEVBQVNsQyxTQUFTdUIsY0FBYyxNQUN0Q1csRUFBT1QsVUFBVUMsSUFBSSxRQUNyQlEsRUFBT0MsVUFBWUYsRUFHbkIvQixVQUFVeUIsWUFBWU8sS0FNNUIsU0FBU0osWUFDUCxLQUFPNUIsVUFBVWtDLFlBQ2ZsQyxVQUFVbUMsWUFBWW5DLFVBQVVrQyxZQUlwQyxTQUFTOUIsYUFDUCxNQUFNZ0MsRUFBWXRDLFNBQVNDLGNBQWMsU0FDbkNLLEVBQWEsSUFBSVUsS0FDakJ1QixFQUFPLEdBQUdqQyxFQUFXa0MsWUFBWWxDLEVBQVdtQyxjQUFjbkMsRUFBV29DLGdCQUUzRUosRUFBVWQsWUFBY2UsRUExRzFCdkMsU0FBU08saUJBQWlCLG1CQUFvQkgiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVmFyaWFibGVzXHJcbmNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjZm9ybWApO1xyXG5jb25zdCB0YXNrc0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjdGFza3NMaXN0YCk7XHJcbmxldCB0YXNrcyA9IFtdO1xyXG5cclxuLy8gRXZlbnRvc1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGBET01Db250ZW50TG9hZGVkYCwgc3RhcnRBcHApO1xyXG5cclxuZnVuY3Rpb24gc3RhcnRBcHAoKSB7XHJcbiAgZXZlbnRMaXN0ZW5lcnMoKTtcclxuICBhY3R1YWxEYXRlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV2ZW50TGlzdGVuZXJzKCkge1xyXG4gIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihgc3VibWl0YCwgYWRkVGFzayk7XHJcbn1cclxuXHJcbi8vIEZ1bmNpb25lc1xyXG5mdW5jdGlvbiBhZGRUYXNrKGUpIHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIC8vICAgSW5wdXQgZW4gZWwgcXVlIGVsIHVzdWFyaW8gZXNjcmliZVxyXG4gIGNvbnN0IGZvcm1JbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNmb3JtSW5wdXRgKTtcclxuICBjb25zdCB0YXNrID0gZm9ybUlucHV0LnZhbHVlO1xyXG5cclxuICBpZiAodGFzayA9PT0gYGApIHtcclxuICAgIHNob3dFcnJvcihgTm8gZXNjcmliaXN0ZSB1bmEgdGFyZWFgKTtcclxuXHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBjb25zdCB0YXNrT2JqID0ge1xyXG4gICAgaWQ6IERhdGUubm93KCksXHJcbiAgICB0YXNrLFxyXG4gIH07XHJcblxyXG4gIC8vIEHDsWFkaXIgYWwgYXJyYXkgZGUgdGFyZWFzXHJcbiAgdGFza3MgPSBbLi4udGFza3MsIHRhc2tPYmpdO1xyXG5cclxuICAvLyBVbmEgdmV6IGFncmVnYWRvLCBjcmVhciBodG1sXHJcbiAgY3JlYXRlSFRNTCgpO1xyXG5cclxuICAvLyBSZWluaWNpYXIgZWwgZm9ybXVsYXJpb1xyXG4gIGZvcm0ucmVzZXQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd0Vycm9yKGVycm9yKSB7XHJcbiAgY29uc3QgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5tYWluYCk7XHJcbiAgY29uc3QgZXJyb3JNZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChgcGApO1xyXG5cclxuICBlcnJvck1lc3NhZ2UudGV4dENvbnRlbnQgPSBlcnJvcjtcclxuICBlcnJvck1lc3NhZ2UuY2xhc3NMaXN0LmFkZChgZXJyb3JgKTtcclxuXHJcbiAgbWFpbi5hcHBlbmRDaGlsZChlcnJvck1lc3NhZ2UpO1xyXG5cclxuICAvLyAgQm9ycmEgbGEgYWxlcnRhIHBhc2Fkb3MgMyBzZWd1bmRvc1xyXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgZXJyb3JNZXNzYWdlLnJlbW92ZSgpO1xyXG4gIH0sIDMwMDApO1xyXG59XHJcblxyXG4vLyBNdWVzdHJhIGxhcyB0YXJlYXNcclxuZnVuY3Rpb24gY3JlYXRlSFRNTCgpIHtcclxuICBjbGVhbkhUTUwoKTtcclxuXHJcbiAgaWYgKHRhc2tzLmxlbmd0aCA+IDApIHtcclxuICAgIHRhc2tzLmZvckVhY2goKHRhc2spID0+IHtcclxuICAgICAgLy8gQ3JlYXIgZWwgSFRNTFxyXG4gICAgICBjb25zdCB0YXNrQ29udGVudCA9IGAgICBcclxuICAgICAgPHN2Z1xyXG4gICAgICAgIGNsYXNzPVwidGFza19fY2hlY2tcIlxyXG4gICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gICAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj5cclxuICAgICAgPHBhdGhcclxuICAgICAgICBkPVwibTEwIDE1LjU4Ni0zLjI5My0zLjI5My0xLjQxNCAxLjQxNEwxMCAxOC40MTRsOS43MDctOS43MDctMS40MTQtMS40MTR6XCI+PC9wYXRoPlxyXG4gICAgICA8L3N2Zz5cclxuXHJcbiAgICAgIDxwIGNsYXNzPVwidGFza19fdGV4dFwiPlxyXG4gICAgICAke3Rhc2sudGFza31cclxuICAgICAgPC9wPlxyXG5cclxuICAgICAgPHN2Z1xyXG4gICAgICAgIGNsYXNzPVwidGFza19fdHJhc2hcIlxyXG4gICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gICAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj5cclxuICAgICAgPHBhdGhcclxuICAgICAgICBkPVwiTTUgMjBhMiAyIDAgMCAwIDIgMmgxMGEyIDIgMCAwIDAgMi0yVjhoMlY2aC00VjRhMiAyIDAgMCAwLTItMkg5YTIgMiAwIDAgMC0yIDJ2MkgzdjJoMnpNOSA0aDZ2Mkg5ek04IDhoOXYxMkg3Vjh6XCI+PC9wYXRoPlxyXG4gICAgICA8cGF0aCBkPVwiTTkgMTBoMnY4SDl6bTQgMGgydjhoLTJ6XCI+PC9wYXRoPlxyXG4gICAgICA8L3N2Zz5gO1xyXG5cclxuICAgICAgY29uc3QgdGFza0xJID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChgbGlgKTtcclxuICAgICAgdGFza0xJLmNsYXNzTGlzdC5hZGQoYHRhc2tgKTtcclxuICAgICAgdGFza0xJLmlubmVySFRNTCA9IHRhc2tDb250ZW50O1xyXG5cclxuICAgICAgLy8gQWdyZWdhciBhbCBIVE1MXHJcbiAgICAgIHRhc2tzTGlzdC5hcHBlbmRDaGlsZCh0YXNrTEkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBMaW1waWFyIGVsIGh0bWxcclxuZnVuY3Rpb24gY2xlYW5IVE1MKCkge1xyXG4gIHdoaWxlICh0YXNrc0xpc3QuZmlyc3RDaGlsZCkge1xyXG4gICAgdGFza3NMaXN0LnJlbW92ZUNoaWxkKHRhc2tzTGlzdC5maXJzdENoaWxkKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFjdHVhbERhdGUoKSB7XHJcbiAgY29uc3QgdGFza3NEYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2RhdGVgKTtcclxuICBjb25zdCBhY3R1YWxEYXRlID0gbmV3IERhdGUoKTtcclxuICBjb25zdCBkYXRlID0gYCR7YWN0dWFsRGF0ZS5nZXREYXkoKX0vJHthY3R1YWxEYXRlLmdldE1vbnRoKCl9LyR7YWN0dWFsRGF0ZS5nZXRGdWxsWWVhcigpfWA7XHJcblxyXG4gIHRhc2tzRGF0ZS50ZXh0Q29udGVudCA9IGRhdGU7XHJcbn1cclxuIl19
